#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w{ .. lib })

require 'imgur_up'
require 'mercenary'

imgur_up = ImgurUp::ImgurUp.new("~/.imgur-auto-uploader")

Mercenary.program("imgur-up") do |p|
  p.description 'Imgur Auto-Uploader watches folders and uploads new images to Imgur.'
  p.syntax 'imgur-up <subcommand> [options]'

  p.define_singleton_method(:command_with_development_mode) do |name, &block|
    p.command(name) do |c|
      c.option 'dev', '--dev', 'Run in development mode.'

      c.action do |_, options|
        imgur_up = ImgurUp::ImgurUp.new("~/.imgur-auto-uploader-dev") if options["dev"]
      end

      block.call(c)
    end
  end

  p.command_with_development_mode(:config) do |c|
    c.syntax 'config'
    c.description 'Configure Imgur Auto-Uploader. This command needs to be run at least once.'

    c.action do
      imgur_up.prompt_for_configuration
    end
  end

  p.command_with_development_mode(:watch) do |c|
    c.syntax 'watch PATH1 [PATH2 [PATH3 ...]]'
    c.description 'Watches PATHs for new images and upload them to Imgur.'

    c.action do |args|
      imgur_up.watch(args)

      Signal.trap("INT")  { exit 0 }
      Signal.trap("TERM") { exit 0 }

      ImgurUp.logger.info "Ready."
      sleep
    end
  end

  p.action do |args|
    puts p if args.empty? || !p.has_command?(args.first)
  end
end
